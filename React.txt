			 React/React.js
.....................................................................................

What is react?
   A JavaScript library for building user interfaces.

User interface apps are

1.Browser apps
2.Mobile apps
3.Desktop apps
4.Tv apps
5.etc...

React is used to build
 browser,mobile/tab ,tv.

.....................................................................................
			 Design patterns in UI Development
.....................................................................................
1.MVC
2.MVVM
3.Flux

React/React Native uses "Flux" design pattern

Flux is new design pattern to design ui invented by facebook.
 https://facebookarchive.github.io/flux/

https://facebookarchive.github.io/flux/docs/in-depth-overview

In Flux pattern react is "View/Ui/Presentation" Layer.

In Flux Pattern data is changed via "One directional Flow", You(UI) cant change data directly.
.....................................................................................
			 React and  Browser UI Development 
.....................................................................................

React in browser uses "HTML" as primary programming language for representing UI.
React in Mobile uses "Mobile specific language" for representing UI.
....................................................................................
			React and HTML
....................................................................................

DOM: - Document Object Model
............................
What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.
https://www.w3.org/TR/1998/WD-DOM-19980416/		

In order to understand DOM fully , we need to understand HTML very deeply.

Programming language stages:
...........................

1.source code

hello.java
hello.c
hello.cpp
hello.py
hello.js

 ----->compiled ?

to generate assembly instructions

|
2.compiled code - assembly instruction
 hello.class
 hello.obj
|
3.Execute
 final output


HTML:

1.HTML IS PL? 
  - YES
2.HTML Is compiled 
  -YES
  HTML source code is compiled into assembly. 

3.HTML is executed?
  Yes

source code:

index.html

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

|
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
 |
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)

body
  div
     h1
        Welcome 
     h1
  div
body

 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
|
.....................................................................................
				Runtime 
.....................................................................................
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList
body -Node
 div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body


 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
|
Layout/Paint Engine: will convert nodes into pxs : final output


sourcecode--->parsed code---compiled code---linked list---tree--->drawn on screen(ui)


.....................................................................................
         Static web pages: htmls are displayed into browser.
.....................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

			That is birth of javascript


How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

.....................................................................................

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		              -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
.................................

react-dom.js  => Browser
react-native.js => Mobile
.....................................................................................				React and ui building
...................................................................................

React uses  a small programming language to describe UI called "JSX"

As we discussed React is used in many app dev like browser,mobile,tv apps.

Each app type(browser,mobile) has its own JSX syntax...

Browser jsx uses HTML as language
Mobile Jsx uses "Mobile markup" as language.

-----------------------------------------------------------------------------
 Markup layer             |  React Core Engine    | Render Engine   | Target
-----------------------------------------------------------------------------

HTML Markup---------------|  Object Tree(V.DOM)   | ReactDom.render |  Browser

Mobile Markup-------------|  Object Tree          |ReactNative.render| Mobile 						   /Tabs/TV

..............
VR Markup---------------  |  Object Tree          |VR.render         |VR devices

IOT Markup--------------- |  Object Tree          | IOT.render       |IOT Devices   

.....................................................................................
			 React Project Setup
.....................................................................................

React teams offers tool set to create react projects

G:\IBM\2024\July\ReactNative-b1>npm create vite@latest

> npx
> create-vite

√ Project name: ... my-react
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in G:\IBM\2024\July\ReactNative-b1\my-react...

Done. Now run:

  cd my-react
  npm install
  npm run dev


G:\IBM\2024\July\ReactNative-b1>cd my-react

G:\IBM\2024\July\ReactNative-b1\my-react>npm install

G:\IBM\2024\July\ReactNative-b1\my-react>code .

G:\IBM\2024\July\ReactNative-b1\my-react>npm run dev

....................................................................................
			How to create dom element using react
.....................................................................................

Exploring the project structure:

package.json
{
  "name": "my-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.1"
  }
}

index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root">
	
   </div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


src/
 main.jsx

It is entry file/main program where we start.

//create dom element using plain js and how to attach on existing dom tree

function createElement() {
    const Heading = document.createElement('h1')
    Heading.innerHTML = 'Hello React!'
    //attach Heading with existing div
    const rootElement = document.getElementById('root')
    rootElement.appendChild(Heading)
}
createElement()

Using react:

import React from "react";
import ReactDOM from 'react-dom/client'

//CREATE DOM ELEMENT USING JSX
const Heading = <h1>Hello React!!</h1>// document.createElement('h1')

const rootElement = document.getElementById('root')
ReactDOM.createRoot(rootElement).render(Heading)

.....................................................................................
	JSX - java script and XML - langugage to create User interfaces
.....................................................................................

React uses declarative dom programing using a mini language invented by facebook : JSX

JSX : - javascript and xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and javascript.
 3.JSX is dsl and declarative.
 4.Every device has its own jsx language syntax.
 5.Browsers jsx can't be used for building mobile application.


Since jsx  is a language cant be executed on browser /mobile directly.
..................................................................................

JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		   Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
	Render Engine ; will convert react object tree into js dom object tree/mobile
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile


JSX is used to create dom elements/ Mobile elements

Every DOM element is object.
.....................................................................................
				Component
.................................................................................

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(data),behaviour(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....

Component === Widget ==== Object ==== DOM

Like Object tree(DOM Tree), In React we can create "Component" Tree.


      Node===DOM Object====Component
       h1     HTMLHeading   Heading

"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance, A Component can be small as a button or as large as an entire Page"
.....................................................................................

			Component Creational patterns
...................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

Components can be created any one or mixed way  style.
"functional Pattern" is more popular and recommended pattern....


1.Variable Pattern


import React from "react";
import ReactDOM from 'react-dom/client'

//Heading is just variable
//<h1>Hello React!!</h1> is Component
const Heading = <h1>Hello React!!</h1>// document.createElement('h1')

const rootElement = document.getElementById('root')
ReactDOM.createRoot(rootElement).render(Heading)



Functional Pattern:
...................
import ReactDOM from 'react-dom/client'

function Heading() {
    return <h1>
        Hello React!
    </h1>
}

ReactDOM.createRoot(document.getElementById('root')).render(Heading())

Here we are calling reader(Heading())

Heading() - calling function like this is not recommended - imperative programming

Heading() - function call can be converted html like syntax that means tag tax syntax. -<Heading></Heading>


import ReactDOM from 'react-dom/client'

function Heading() {
    return <h1>
        Hello React!
    </h1>
}

// ReactDOM.createRoot(document.getElementById('root')).render(Heading())
ReactDOM.createRoot(document.getElementById('root')).render(<Heading></Heading>)

Arrow functions and components:
...............................

import ReactDOM from 'react-dom/client'

// const Heading = () => {
//     return <h1>
//         Hello React!
//     </h1>
// }

const Heading = () => <h1>
    Hello React!
</h1>


ReactDOM.createRoot(document.getElementById('root')).render(<Heading></Heading>)
...................................................................................
			   class pattern

Now a days class pattern is almost deprecated, only functional pattern are popular..


import ReactDOM from 'react-dom/client'
import React  from 'react'

class Heading extends React.Component {

    //override render method from React.Component
    render(){
        return <h1>
            Hello React!!!
        </h1>
    }

}


ReactDOM.createRoot(document.getElementById('root')).render(<Heading></Heading>)

.....................................................................................
			Exploring JSX
.....................................................................................

JS-Javascript
X -  XML

Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.


Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing.


eg:
import ReactDOM from 'react-dom/client'

const Welcome = ()=> {

    return <h1> Hello
}


ReactDOM.createRoot(document.getElementById('root')).render(<Welcome></Welcome>)

This code generates error.
................

The code which has no error.

import ReactDOM from 'react-dom/client'

const Welcome = ()=> {

    // return <h1> Hello
    return <h1> Hello</h1>
}


ReactDOM.createRoot(document.getElementById('root')).render(<Welcome/>)
.....................................................................................

2. In xml you must have one single root element.
  all elements must be organized under single root element.

   <h1>Welcome to IBM</h1>
   <p>Hello</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

			
const Welcome = ()=>{
    return <div>
        <h1>Hello
    </div>
}
This code will throw error.


import ReactDOM from 'react-dom/client'

const Welcome = () => {

    return <div>
        <h1>Welcome to IBM</h1>
        <p>Hello</p>
    </div>

}


ReactDOM.createRoot(document.getElementById('root')).render(<Welcome />)
....................................................................................
			  Fragments
....................................................................................

Some times i dont want root element but still i need to escape from compiler error
   -Fragements

Fragements are used to wrap elements invisible way.

Suppose if i dont want any root element, then we can use Fragement.

Fragements are used to escape from compiler.


Syntax:

1. <React.Fragment>

 </React.Fragement>

2. <Fragment>

 </Fragement>


3.<>

 </>
import ReactDOM from 'react-dom/client'
// import React, { Fragment } from 'react'

// const Welcome = () => {
//     return <React.Fragment>
//         <h1>Welcome to IBM</h1>
//         <p>Hello</p>
//     </React.Fragment>

// }


// const Welcome = () => {
//     return <Fragment>
//         <h1>Welcome to IBM</h1>
//         <p>Hello</p>
//     </Fragment>

// }
const Welcome = () => {
    return <>
        <h1>Welcome to IBM</h1>
        <p>Hello</p>
    </>

}


ReactDOM.createRoot(document.getElementById('root')).render(<Welcome />)
..................................................................................
			Component Composition
..................................................................................

I have ui called gallery, inside Gallary i want to display Profile information.

Level - 1:
import ReactDOM from 'react-dom/client'

const Gallery = () => {
    return <div>
        <h1>Scientists / Computer</h1>
        <h3>Alan Turing</h3>
        <h4>Born : 23 June 1912</h4>
        <h4>Died : 7 June 1954 (aged 41)
            Wilmslow, Cheshire, England
        </h4>
    </div>
}


ReactDOM.createRoot(document.getElementById('root')).render(<Gallery />)

Here scientists information is tightly coupled with Gallery.

import ReactDOM from 'react-dom/client'

const ProfileHeading = () => <h1>Scientists / Computer</h1>

const Profile = () => {
    return <>
        <ProfileHeading />
        <h3>Alan Turing</h3>
        <h4>Born : 23 June 1912</h4>
        <h4>Died : 7 June 1954 (aged 41)
            Wilmslow, Cheshire, England
        </h4>
    </>
}

const Gallery = () => {
    return <div>
        <Profile />
    </div>
}


ReactDOM.createRoot(document.getElementById('root')).render(<Gallery />)
.....................................................................................
.....................................................................................
			 React Dev tool
.....................................................................................

It is tool part of browser as plugin, used to insepect the structure of app.
https://react.dev/learn/react-developer-tools

.....................................................................................
.....................................................................................
		  Component Composition and Modularity
.....................................................................................
Every Component will go into separate folders and files, through es 6 modules you can import export components..

src/profile/Profile.jsx

import { ProfileHeading } from "./ProfileHeading"

const Profile = () => {
    return <>
        <ProfileHeading />
        <h3>Alan Turing</h3>
        <h4>Born : 23 June 1912</h4>
        <h4>Died : 7 June 1954 (aged 41)
            Wilmslow, Cheshire, England
        </h4>
    </>
}
export { Profile }


src/gallery/Gallery.jsx

import { Profile } from "../profile/Profile"

const Gallery = () => {
    return <div>
        <Profile />
    </div>
}
export { Gallery } 


src/App.jsx
import { Gallery } from "./gallery/Gallery"

function App() {

  return (
    <>
      <Gallery />
    </>
  )
}

export default App


src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
..................................................................................
			Barrel Export
..................................................................................

src/welcome/
   Hello.jsx
   Hai.jsx
   Greeter.jsx

when you import these files where ever, we have to import 
		 
import { Hello } from "./welcome/Hello"
import { Hai } from "./welcome/Hai"
import { Greeter } from "./welcome/Greeter"

Barrel export is nothing simplifiying export and import...
 Using Barrel export you dont need to use fileName when import
 Using Barrel export you dont need to use multiple import statement.

How to use barrel export?

Rule 1:
 inside folder create "index.js"
 src/profile/index.js 

Rule 2:
 inside index.js
  
 import {Profile} './Profile'

 export {Profile}

Rule 3: 
  inside another file like gallary.jsx

  import {Profile} './profile'

....................................................................................
                     Data Binding
....................................................................................
As of now we have seen only how to create static UI - (only HTML)

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays

How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 

import React from 'react'
import ReactDOM from 'react-dom/client'

const User = ()=>{
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const status = true
    const id = 1
    const imageSrc='https://i.imgur.com/7vQD0fPs.jpg'

    return <div>
            <img src={imageSrc} alt='Your Image' />
            <h1>{id}</h1>
            <p>{userName}</p>
            <p>{mail}</p>
            <p>{status ? "Available" : "Not Available"}</p>
    </div>
}

const App = ()=> {
    return <User/>
}



ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
..................................................................................
			   Data Binding Patterns

1.property binding aka props pattern
2.State binding aka state pattern.


props Pattern:

When you think about component , you should thing about resuablity..

How to create component with resuablity?

 Component should be configurable, Component should accept data from outside.

if data is passed to the component from outside(From another component -Parent),
This pattern is called props pattern /Property pattern.

Since Component is function, function can take args (which is called property).

import React from 'react'
import ReactDOM from 'react-dom/client'

//props is just variable holding all parameters
//props value is just object
const User = (props) => {
    console.log(props)
    return <div>
        <img src={props.imageSrc} alt='Your Image' />
        <h1>{props.id}</h1>
        <p>{props.userName}</p>
        <p>{props.mail}</p>
        <p>{props.status ? "Available" : "Not Available"}</p>
    </div>
}

const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'
    // userName,id,mail are parameters
    return <>
        <User userName={userName} id={id} mail={mail} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={2} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={3} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={4} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={5} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={6} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
			 Object destructuring with props
.....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'

// const User = (props) => {
//     const { imageSrc, id, userName, mail, status } = props
//     return <div>
//         <img src={imageSrc} alt='Your Image' />
//         <h1>{id}</h1>
//         <p>{userName}</p>
//         <p>{mail}</p>
//         <p>{status ? "Available" : "Not Available"}</p>
//     </div>
// }
const User = ({ imageSrc, id, userName, mail, status }) => <div>
    <img src={imageSrc} alt='Your Image' />
    <h1>{id}</h1>
    <p>{userName}</p>
    <p>{mail}</p>
    <p>{status ? "Available" : "Not Available"}</p>
</div>


const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'
    // userName,id,mail are parameters
    return <>
        <User userName={userName} id={id} mail={mail} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={2} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={3} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={4} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={5} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
        <User userName={"Ram"} id={6} mail={"ram@gmail.com"} status={true} imageSrc={imageSrc} />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
...................................................................................
				 Default Props
....................................................................................
When you design component , you must pass default properties so that we can avoid
many bugs during runtime.

How to set default props?

ComponentName.defaultProps= {
 propName:value
}
import React from 'react'
import ReactDOM from 'react-dom/client'

const User = ({ imageSrc, id, userName, mail, status }) => <div>
    <img src={imageSrc} alt='Your Image' />
    <h1>{id}</h1>
    <p>{userName}</p>
    <p>{mail}</p>
    <p>{status ? "Available" : "Not Available"}</p>
</div>

//default Props
User.defaultProps = {
    userName: 'Your Name',
    id: 0,
    status: false,
    mail: 'something@yourdomain.com',
    imageSrc: 'https://i.imgur.com/7vQD0fPs.jpg'
}


const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'
    return <>
        <User userName={userName} id={id} mail={mail} status={true} imageSrc={imageSrc} />
        <hr />
        <User />
        <User id={2} userName={"Murugan"} />

    </>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................


CSS 

What is CSS?
 language - Styling language - DSL and declarative
 to design web pages



How to use css?

two ways

using css language directly -  css selectors
<h1 class="selector">

inline style
<h1 style="color:red">
 -static css

using css via javascript
  - dynamic css

<h1 id="heading">hello</h1>

let heading= document.getElementById("heading")
heading.style.color='red'
//text-align: center;
heading.style.textAlign='center'


React uses two types of styling

1.css classes
2.css style - inline styles

You can use any css framework for styling.
Even you can write your own css also...

React html attribute syntax:
............................

<div class="className">

</div>

class is html attribute.

In React we cant add html attributes directly, we need to follow jsx notation/naming starndard - camelCase


<div className="class">

</div>

HTML ATTRIBUTES

accept acceptCharset accessKey action allowFullScreen alt async autoComplete
autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked
cite classID className colSpan cols content contentEditable contextMenu controls
controlsList coords crossOrigin data dateTime default defer dir disabled
download draggable encType form formAction formEncType formMethod formNoValidate
formTarget frameBorder headers height hidden high href hrefLang htmlFor
httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list
loop low manifest marginHeight marginWidth max maxLength media mediaGroup method
min minLength multiple muted name noValidate nonce open optimum pattern
placeholder poster preload profile radioGroup readOnly rel required reversed
role rowSpan rows sandbox scope scoped scrolling seamless selected shape size
sizes span spellCheck src srcDoc srcLang srcSet start step style summary
tabIndex target title type useMap value width wmode wrap
onClick

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import './App.css'

const User = ({ imageSrc, id, userName, mail, status }) => <div>
    <img className="logo" src={imageSrc} alt='Your Image' />
    <h1 style={styles.heading}>{id}</h1>
    <p style={{color:'blue'}}>{userName}</p>
    <p>{mail}</p>
    <p>{status ? "Available" : "Not Available"}</p>
</div>
//styles object
const styles = {
    heading: {
        color: 'red',
        fontStyle: 'italic',
        fontFamily: 'Charcoal',
        border: 'thick solid #0000FF',
        borderRadius: '25px'
    }
}

//default Props
User.defaultProps = {
    userName: 'Your Name',
    id: 0,
    status: false,
    mail: 'something@yourdomain.com',
    imageSrc: 'https://i.imgur.com/7vQD0fPs.jpg'
}


const App = () => {
    const userName = 'Subramanian Murugan'
    const mail = 'sasubramanian_md@hotmail.com'
    const id = 1
    const imageSrc = 'https://i.imgur.com/7vQD0fPs.jpg'
    return <>
        <User userName={userName} id={id} mail={mail} status={true} imageSrc={imageSrc} />
        <hr />
        <User />
        <User id={2} userName={"Murugan"} />

    </>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
....................................................................................
			  List rendering
...................................................................................

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const List = ({ names }) => {
    return <>
        <ul>
           {
             names.map(name=>{
                return <li>{name}</li>
             })
           }
        </ul>
    </>
}


const App = () => {
    const names = ["Subramanian", "Murugan", "Arun", "Karthik"]
    return <>
        <List names={names} />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
....................................................................................
			 Rendering Object List
....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import TODOS from './mock-data/todos'

const TodoList = ({ todos }) => {
    return <>
        <div>
            {
                todos.map(todo => {
                    return <section key={todo.id}>
                        <h1>{todo.id} - {todo.userId}</h1>
                        <h3>{todo.title}</h3>
                        <h3>{todo.completed ? "Yes" : "No"}</h3>
                    </section>
                })
            }
        </div>
    </>
}


const App = () => {
    return <>
        <TodoList todos={TODOS} />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
....................................................................................
			How to break up list component
...................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import TODOS from './mock-data/todos'

const TodoListItem = ({ todo: { id, userId, title, completed } }) => <>
    <h1>{id} - {userId}</h1>
    <h3>{title}</h3>
    <h3>{completed ? "Yes" : "No"}</h3>
</>

const TodoList = ({ todos }) => {
    return <>
        <div>
            {
                todos.map(todo => {
                    return <section key={todo.id}>
                        <TodoListItem todo={todo} />
                    </section>
                })
            }
        </div>
    </>
}


const App = () => {
    return <>
        <TodoList todos={TODOS} />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

....................................................................................
			 key-prop
....................................................................................

key prop is built in react prop ,used by react engine to optimize the list rendering..

react-jsx-dev-runtime.development.js:87 Warning: Each child in a list should have a unique "key" prop.

      <ul>
            {
                data.map(post => {
                    return <li key={post.id}>{post.title}</li>
                })
            }
        </ul>

....................................................................................
			Conditional Rendering
....................................................................................
How to introduce if ...else and also tenary operator in jsx?

Your components will often need to display different things depending on different conditions.

In React, you can conditionally render jsx using javascript syntax like if statement ,&& and ?: operator..

Returning different JSX(Component) depending on condition.


Use case : using if..else how to render components

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const todoList = [{
    id: 1,
    name: 'learn react',
    status: true
},
{
    id: 2,
    name: 'Learn next',
    status: false
},
{
    id: 3,
    name: 'learn es',
    status: true
},
{
    id: 4,
    name: 'learn Angular',
    status: false
},
{
    id: 5,
    name: 'learn React Native',
    status: false
}

]

const Item = props => {
    const { name, status } = props.todo
    //using if condition
    if (status) {
        return <li>{name} ✔</li>
    } else {
        return <li>{name} X </li>
    }
}
const TodoList = props => {
    return <>
        <ul>
            {
                props.todos.map(todo => {
                    return <>
                        <Item todo={todo} />
                    </>
                })
            }
        </ul>
    </>
}
const App = () => {
    return <>
        <TodoList todos={todoList} />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

Use case: COnditional rendering using Tenary Operator

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const todoList = [{
    id: 1,
    name: 'learn react',
    status: true
},
{
    id: 2,
    name: 'Learn next',
    status: false
},
{
    id: 3,
    name: 'learn es',
    status: true
},
{
    id: 4,
    name: 'learn Angular',
    status: false
},
{
    id: 5,
    name: 'learn React Native',
    status: false
}

]

// const Item = props => {
//     const { name, status } = props.todo
//     //using Tenary Operator
//     return status ? <li>{name} ✔</li> : <li>{name} X </li>
// }

const Item = ({ todo: { name, status } }) => status ? <li>{name} ✔</li> : <li>{name} X </li>

const TodoList = props => {
    return <>
        <ul>
            {
                props.todos.map(todo => {
                    return <>
                        <Item todo={todo} />
                    </>
                })
            }
        </ul>
    </>
}
const App = () => {
    return <>
        <TodoList todos={todoList} />
    </>

}



ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

Use case: Conditional Rendering using && Operator:

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const todoList = [{
    id: 1,
    name: 'learn react',
    status: true
},
{
    id: 2,
    name: 'Learn next',
    status: false
},
{
    id: 3,
    name: 'learn es',
    status: true
},
{
    id: 4,
    name: 'learn Angular',
    status: false
},
{
    id: 5,
    name: 'learn React Native',
    status: false
}

]


// const Item = ({ todo: { name, status } }) => status ? <li>{name} ✔</li> : <li>{name} X </li>

const Item = ({ todo: { name, status } }) => <li> {name} {status && '✔'}</li>

const TodoList = props => {
    return <>
        <ul>
            {
                props.todos.map(todo => {
                    return <>
                        <Item todo={todo} />
                    </>
                })
            }
        </ul>
    </>
}
const App = () => {
    return <>
        <TodoList todos={todoList} />
    </>

}


ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
				What can be prop
.....................................................................................

1.Prop can be data
2.Prop can another component or element
..
3.Prop can be function
4.Prop can be state(dynamic prop)



1.Prop can another component or element.

How to render component

 <Grid></Grid> -  Grid can have children: passing prop
 <Grid/> -  Grid has no children
 
Parent-Child Relation ship:

cont A = ()=>{
  return <B/>
}
Parent-Child Relation ship:
 via props

<Layout> -parent
	<Page>-child
		<Header> -child
		   <Logo> -child

		   </Image>
		</Header>
	</Page>
</Layout>  














