			 Javascript
			   (ES 6)
...................................................................................
What is ES 6?
  IT is just version no of javascript language.

What is javascript?
   Javascript is Object based,functional style programming language.

Version of Javascript:

Javascript language created for browsers in 1995 for building dynamic web pages by NetsCap Communication.

After javascript language created, the language was submitted to standard body called
"ECMA" international

After submission, the language was standarized and released by committee.

1.ES 1.0 -->1996
2.ES 3.0 -->1999
3.ES 4.0 -->2006
4.ES 5.0 --->2007
5.ES 6.0 --->2012-2015
6.ES 7.0 ----->2016
etc.....

Javascript learning path(ES6):
..............................
1.Language fundamentals
2.Functions 
3.Objects

1.Language fundamentals
 ->Variables
 ->Literals
 ->Type Systems

Project setup:

G:\IBM\2024\July\ReactNative-b1>mkdir es6apps
G:\IBM\2024\July\ReactNative-b1>cd es6apps
G:\IBM\2024\July\ReactNative-b1\es6apps>mkdir src
G:\IBM\2024\July\ReactNative-b1\es6apps>code .

G:\IBM\2024\July\ReactNative-b1\es6apps/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 Apps</title>
</head>
<body>
    <h1>ES6 Apps</h1>
    <script  src="src/index.js"></script>
</body>
</html>

Run Html in the browser.

1.we need web server , which can be installed in vs code "Extensions".
 
 Go to vs code extension tab,search extension called "live server",
 install live server and after installing restart the vs code.

2.Open the project explore and right click on index.html click "open with live Server"
 You can see the html is lanuched in the browser.
.....................................................................................
			Getting started with js(e6)
.....................................................................................

Hello World:
............
create js file under src dir
src/index.js
.....................................................................................


1.variable declarations

var,let,const -keywords to declare variables
 
 let /const - es 6 keywords
eg:
 let firstName

2.literals -values
   strings,numbers,boolean,undefined,NaN,infinity,function,null,object


3.Data types
   js is dynamic typed language-the type of variable is understood only during runtime.
  int a =10 - strongly typed
  let a =20 - dynamic typed

  literal   - type
....................
  string    - string
  number    - number
  boolean   - boolean
  undfined   - undefined
  NaN       - number
  Infinity  - number
  function  - function
  object    - object
  null      - object

Running Env:

1.node js - command line
2.Browser
3.Mobile

....................................................................................
....................................................................................
				Variables,data types,Literals
.....................................................................................

JS is dynamically typed,so type is not declared in advance, type of variables are decided during runtime, based on "literals-values"

Js has 9 literals but only 6 types.

strings,numbers,boolean,undefined,object,function- types

//strings

let firstName="Subramanian"
let lastName='Murugan'
//back tick and string interpolation: es 6 feature
//let fullName = firstName + lastName
let fullName =`${firstName} ${lastName}`
console.log("Your Name " + fullName)
console.log("Your Name",fullName)
console.log(`Your name ${fullName}`)


Numbers:
 only type called number 
 64 bit aka double.

//numbers
let qty = 10
let price = 10.45
let total = qty * price
console.log(`Total ${total}`)


Booleans:
 true or false

//true or false 

//boolean
let isLoggedIn = true
let isDisabled = false

console.log(`Is LoggedIn ${isLoggedIn} Is Disabled ${isDisabled}`)


Undefined:
 Variable is declared without any valid value.
//undefined

let qty;
console.log(`Quantity ${qty}`)

NaN : Not a Number

NaN is number only which represents "error".
If you do any numerical computation, if computation is failed you will get NaN.
NaN is kind of "error".
if you get NaN you have to fix beacuse is bug

NaN Use case:
if you do computation against undefined values, you get NaN.

let qty
let price=100
let total = qty * price 

console.log(`Qty ${qty} Price ${price} Total ${total}`)


Infinity:
  Div/0
//infnity
let price = 100;
let avgPrice = price / 0
console.log(`Avg Price ${avgPrice}`)
..................................................................................
			Advanced Boolean
..................................................................................
What can be true or false?

decision making : if..else ,tenary operator

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */




let message = 'Hello'

if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
message = ''
if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
let myvar;
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}
myvar = 0
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}
myvar = false
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}
myvar = NaN
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}

....................................................................................
				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==

let a = 100
let b = 100
if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 100
let y = "100"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}

if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}
.....................................................................................
			 const
....................................................................................

let vs const

const 
 readonly,
 we cant reinitalize the variable

let a=10
console.log(`a value is ${a}`)
a=900
console.log(`a value is ${a}`)

const b=100;
console.log(`b value is ${b}`)
//you cant reinitalize
b=900
.....................................................................................
			   Functions
....................................................................................
functions are building block of javascript language.
functions encapsulate the logic of application.
functions may take args and return values


//function declaration
function sayHello(){
    console.log('hello')
}
//function invocation
sayHello()

Function args and parameters:
..............................


//default arg
function sayHello(name = 'Default Name') {
    console.log('Your name is ', name)
}
//with parameter
sayHello('Subramanian')
//without parameter : undefined will be passed as default value
sayHello()

function multiply(a = 0, b = 0) {
    let c = a * b
    console.log('Result is ', c)
}
multiply(10, 10)
multiply()

....................................................................................
			 Return values
....................................................................................

//default arg
function sayHello(name = 'Default Name') {
   return name;
}
//with parameter
console.log(sayHello('Subramanian'))
//without parameter : undefined will be passed as default value
console.log(sayHello())

function multiply(a = 0, b = 0) {
    let c = a * b
    return c 
}
let res= multiply(10, 10)
console.log(res)
....................................................................................
			  Functional Programming
....................................................................................
According to functional programming, function is just value like numbers,strings.

since function is value can be assigned to a variable.

If you assign the function with variable, then that function can be called with variableName.

if you declare function with variables, without function name called "Anonymous function".

//function literal:

//let is keyword
//a is variable
//10 is literal and its type is number
let a = 10


//let is keyword
//hello is variable
//function(){} -is value: function itself is value
//function has no any name; anonymous function
let hello = function () {
    console.log('Hello')
}
//hello variable can be used to call function
hello()

Anonymous functions args,returns:
................................

let add = function (a = 0, b = 10) {
    return a + b
}
console.log(add(10,10))
console.log(add())
....................................................................................
			ES 6 Anonymous functions-Arrow functions
....................................................................................

Arrow functions were introduced to reduce lot of code in traditional Anonymous functions.


//traditional anonymous function

let hello = function () {
    console.log('hello')
}

hello()

//in arrow anonymous function
let hai = () => {
    console.log('hai')
}
hai()



let hello = () => {
    console.log('hello')
}
//calling
hello()
//here only one line of body: we can remove {}
hello = () => console.log('hello')
hello()

//args and arrow
let add = (a = 0, b = 0) => {
    return a + b
}
console.log(add(10, 10))

//fun having return statement only we can remove {} and return statement
add = (a = 0, b = 0) => a + b
console.log(add(10, 10))

//function having single arg and no default value,we can even remove ()
let stock = a => a
console.log(stock(10))
.....................................................................................
			Higher order function

1.Passing function as parameter to another function
2.Returning function from another function

1.Passing function as parameter to another function
  ->can be from traditonal function
  ->can be arrow function.



Traditional Higer Order function:
//higher order function
//passing function as parameter
//returning function from another function

//a=x
function add(a) {
    return a + 10
}
add(10)
let x = 10
add(x)

///
//greet=hai
function sayGreet(greet) {
    greet()
}

let hai = function () {
    console.log('hai')
}
sayGreet(hai)

sayGreet(function () {
    console.log('hello')
})

Arrow Higher Order function:

const sayGreet = greet =>  greet()

let hai = () => console.log('hai')
sayGreet(hai)
sayGreet(() => console.log('hello'))

...................................................................................
			Higher order Function with args and parameters
...................................................................................
const sayGreet = greet =>  greet('greet')

let hai = (message) => console.log(message)
sayGreet(hai)
sayGreet((message) => console.log(message))


const login = (userName, password, success, failure) => {
    if (userName === 'admin' && password === 'admin') {
        success('login success')
    } else {
        failure('login failed')
    }

}
login('admin', 'admin', status => console.log(status), err => console.log(err))
login('foo', 'bar', status => console.log(status), err => console.log(err))
.....................................................................................
			Higher Order function with Returning function
....................................................................................

function increase() {

    return function () {
        console.log('increase')
    }
}
let myfun = increase()
myfun()


let decrease = () => {
    return () => {
        console.log('decrease')
    }
}
let myfun1 = decrease()
myfun1()

decrease = () => () => console.log('decrease')

let myfun3 = decrease()
myfun3()

.....................................................................................
				  Objects
.....................................................................................			
Objects can be created in two ways

1.constructors pattern
   es 5 functions 
   es 6 classes
2.literal pattern


class declaration:
//how to create object using class.

class Employee {
    //instance variables and methods
    id = 1
    name = 'Subramanian'

    //constructor
    constructor() {
        console.log('consturctor is called')
    }

    //methods
    calculateSalary() {
        return 100
    }
    calculateTax = () => {
        return 10
    }

}
//create object
//let is keyword
//emp is just variable - reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee()
console.log(`${emp.id} ${emp.name} ${emp.calculateSalary()} ${emp.calculateTax()}`)
...................................................................................
		  instance variable initalization

1.inside class
2.inside constructor
3.after object creation.

inside class:

class Employee {
    //instance variables and methods
    id = 1
    name = 'Subramanian'
}

2.inside constructor

2.1.hard coded values
class Employee {
    //instance variables and methods
    id
    name
    //constructor
    constructor() {
       this.id=1
       this.name='Subramaian'
    }
}
2.2. dynamic values - constructor parameters
  
//how to create object using class.

class Employee {
    //instance variables and methods
    id
    name
    //constructor
    constructor(id = 0, name = 'name') {
        this.id = id
        this.name = name
    }

    //methods
    calculateSalary() {
        return 100
    }
    calculateTax = () => {
        return 10
    }

}
//let emp = new Employee(1,'Subramanian')
let emp = new Employee()
console.log(`${emp.id} ${emp.name} ${emp.calculateSalary()} ${emp.calculateTax()}`)

emp = new Employee(1, 'Subramanian')
console.log(`${emp.id} ${emp.name} ${emp.calculateSalary()} ${emp.calculateTax()}`)
.....................................................................................
				Inheritance
.....................................................................................


class Account {
    constructor() {
        console.log('Account')
    }
    deposit() {
        return 0
    }
}
class SavingsAccount extends Account {
    constructor() {
        //call parent class constructor
        super()
        console.log('SavingsAccount')
    }
    //override deposit
    deposit(){
        return 100
    }
}
let sb = new SavingsAccount()
console.log(sb.deposit())
....................................................................................
			Literal Objects
.....................................................................................

syntax:

let variable = {
  key:value,
  key:value
}
let employee = {
    id: 1,
    name: 'Subramanian',
    status: true,
    address: {
        city: 'Coimbatore'
    }
}
console.log(employee.id,employee.name,employee.status,employee.address.city)
console.log(employee)

Javascripts supports lot of built in objects
.............................................

1.Browser related objects
 window,document,history,sessionStorage,localStorage etc...

2.Plain objects/POJOs

1.Object - Super Most parent object
2.Array - To implement ds in js - List
3.JSON  - Json Parser Object
4.String
5.Number
6.Boolean
7.Math
etc....

Array:
......
 Array is object which holds any type of data including other arrays.
 Since array object has many methods.

//arrays
//simple array

let numberList = [1, 2, 3, 4, 5, 6];
//iterators
numberList.forEach(value => {
    console.log(value)
})

let employeeList = [
    {
        id: 1,
        name: 'Ram'
    },
    {
        id: 2,
        name: 'Subramanian'
    },
    {
        id: 1,
        name: 'Kumar'
    }
]
employeeList.forEach(emp=>{
    console.log(emp.id,emp.name)
})
//other iterators - map,filter,find
.....................................................................................
			 Object Destructuring- ES 6 Feature
...................................................................................

1.Arg destructuring
2.return value destructuring.

Arg:
//without destructuring
// function printEmployee(employee) {
//     console.log(`Id ${employee.id}`)
//     console.log(`Name ${employee.name}`)
//     console.log(`City ${employee.address.city}`)
// }

//with destructuring
// function printEmployee(employee) {
//     const { id, name, address } = employee
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`City ${address.city}`)
// }

// function printEmployee(employee) {
//     const { id, name, address: { city } } = employee
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`City ${city}`)
// }
// function printEmployee({ id, name, address: { city } }) {
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`City ${city}`)
// }
const printEmployee = ({ id, name, address: { city } }) => {
    console.log(`Id ${id}`)
    console.log(`Name ${name}`)
    console.log(`City ${city}`)
}

printEmployee({ id: 1, name: 'Subramanian', address: { city: 'Coimbatore' } })

// function getStock() {
//     return {
//         id: 1,
//         symbol: 'google',
//         qty: 10,
//         price: 100
//     }
// }
// console.log(getStock())

// function getStock(id = 1, symbol = 'google', qty = 10, price = 100) {
//     return {
//         id: id,
//         symbol: symbol,
//         qty: qty,
//         price: price
//     }
// }
// console.log(getStock())
// console.log(getStock(2,'microsoft',200,400))

// function getStock(id = 1, symbol = 'google', qty = 10, price = 100) {
//     //key:value
//     //if key and value is same , remove any one
//     return {
//         id,
//         symbol,
//         qty,
//         price
//     }
// }
// console.log(getStock())
// console.log(getStock(2, 'microsoft', 200, 400))

// const getStock = (id = 1, symbol = 'google', qty = 10, price = 100) => {
//     //key:value
//     //if key and value is same , remove any one
//     return {
//         id,
//         symbol,
//         qty,
//         price
//     }
// }

const getStock = (id = 1, symbol = 'google', qty = 10, price = 100) => ({
    id,
    symbol,
    qty,
    price
})

console.log(getStock())
console.log(getStock(2, 'microsoft', 200, 400))

.....................................................................................
				Async Programming
.....................................................................................

Async programming which does not block current thread,work is done in kernal parts.
Results are returned from the kernal using event driven arch.

How to implement async programming?

Req:
1.High level non blocking apis provided by js language.
        -timers,ajax,web socket....
2.Listener function to  handle async results which is called as callbacks.
3.Callbacks are implemented using Higher order Function(function as parameter)


Styles of writing async programming:

1.callbacks pattern
2.Promise Pattern
3.Promise with async and await
4.Reactive Programming via rxjs...




Synchrous work Flow:
...................


//sync work flow

function sayHello() {
    console.log('hello')
}
function sayHai() {
    console.log('hai')
}

function main() {
    sayHello()
    sayHai()
}
main()


Async work flow using timer api:
................................
//Async work flow

function blockMe(message) {
    console.log(message)
}

//greet is variable holding function
//in async context , that function is called as "listener /callback"
//how to turn the the function into callback/listener.. , you need to bind that funciton
//with any async apis - like timer,websocket,ajax
function sayGreet(greet) {
    //use timer api
    setTimeout(greet, 5000)
}

function main() {
    blockMe('start')
    sayGreet(function () {
        console.log('greet')
    })
    blockMe('end')
}
main()
.....................................................................................
			Callback chaining
.....................................................................................

The output of one callback will be input to another callback.

//callback chaining

const getUser = (resolve, reject) => {
    console.log('getUser is called')
    let user = { name: 'admin' }
    //user = null
    if (user) {
        setTimeout(resolve, 1000, user)
    } else {
        setTimeout(reject, 1000, { message: 'User Not found' })
    }
}
const login = (user, resolve, reject) => {
    console.log('login is called')
    if (user.name === 'admin') {
        setTimeout(resolve, 1000, 'Login success')
    } else {
        setTimeout(reject, 1000, 'login failed')
    }
}
const showDashboard = (loginstatus, resolve, reject) => {
    console.log('showDashboard is called')
    if (loginstatus === 'Login success') {
        setTimeout(resolve, 1000, 'Welcome to Dashboard Page')
    } else {
        setTimeout(reject, 1000, 'Welcome to Guest Page')
    }
}



function main() {
    getUser(user => {
        login(user, (status) => {
            showDashboard(status, page => {
                console.log(page)
            }, errpage => {
                console.log(errpage)
            })
        }, err => {
            console.log(err)
        })
    }, err => {
        console.log(err)
    })
}
main()
.....................................................................................
			Callback Hell
.....................................................................................
  getUser(user => {
        login(user, (status) => {
            showDashboard(status, page => {
                console.log(page)
            }, errpage => {
                console.log(errpage)
            })
        }, err => {
            console.log(err)
        })
    }, err => {
        console.log(err)
    })


fs.readdir(source, function (err, files) {
  if (err) {
    console.log('Error finding files: ' + err)
  } else {
    files.forEach(function (filename, fileIndex) {
      console.log(filename)
      gm(source + filename).size(function (err, values) {
        if (err) {
          console.log('Error identifying file size: ' + err)
        } else {
          console.log(filename + ' : ' + values)
          aspect = (values.width / values.height)
          widths.forEach(function (width, widthIndex) {
            height = Math.round(width / aspect)
            console.log('resizing ' + filename + 'to ' + height + 'x' + height)
            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {
              if (err) console.log('Error writing file: ' + err)
            })
          }.bind(this))
        }
      })
    })
  }

In the above code:

Are you able to understand code?
Are you able to debug code easily?
Are you able to scale code?

No!
 This is called "Callback Hell".


How to avoid callback hell or how to write clean async code? how to write simple async programming without callback hell?
*************************************************************************************

Promises:
.........


Promise is design pattern which hides complexity of callback patterns

Since Promise is design pattern, many people have implemented Promise design pattern.

1.JQuery -first promise implementation
2.many libs and frameworks


In order standarize , ECMA committe decided to include Promise Design pattern at language level .(ES 6)
2012 E6 Committe introduced promise design pattern  as  "Promise" Object  in javascript.


.....................................................................................
			  Promise Implementation
.....................................................................................

Features of Promise Object:
1.Promise by deafult is Async. Which implements timer api with 0 ms .
2.Promise can be used with any async callback based  implementations.


Objective:

 To remove callbacks in async/non blocking code. write cleaner async programming.
 To remove complex callback chaining code.


Difference between callbacks and promises:

Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.


....................................................................................

		Promise Implemenation: Object  creations
...................................................................................

1. Create Promise Object from Promise contructor
      new Promise()
2. Create Promise object from factory apis 
      Promise.resolve() / Promise.reject()

Promise object methods:

1.then - success
2.catch - errors
3.finally - clean up

factory api to create Promise object
4.resolve
5.reject
.......................................
6.all
7.race

1.Promise factory api
   -success - resolve
   -failure - reject

Use case : Promise is by default async.

function blockMe(message) {
    console.log(message)
}

// function sayGreet(greet) {
//     setTimeout(greet, 0, 'hello')
// }
function sayGreet() {
    return Promise.resolve('hello')   //returns promise object with success
}



function main() {
    blockMe('start')
    //sayGreet(res => console.log(res))
    sayGreet().then(res => console.log(res))
    blockMe('end')
}
main()

Use case: how to return failure message/error 


function blockMe(message) {
    console.log(message)
}

function sayGreet() {
    return Promise.reject('oops,something went wrong')   //returns promise object with rejection
}



function main() {
    blockMe('start')
    sayGreet().catch(err => console.log(err))
    blockMe('end')
}
main()

Use case : how to return error and success based on logic..

function blockMe(message) {
    console.log(message)
}

function login(userName, password) {
    if (userName === 'admin' && password === 'admin') {
        return Promise.resolve('login success')
    } else {
        return Promise.reject('login failed')   //returns promise object with rejection
    }

}


function main() {
    blockMe('start')
    login('admin', 'admin')
        .then(res => console.log(res))
        .catch(err => console.log(err))
    login('foo', 'bar')
        .then(res => console.log(res))
        .catch(err => console.log(err))
    blockMe('end')
}
main()
	
Use case: how to use timer like async api with promise.for eg setTimeout.

In this case you cant use Promise.resolve/Promise.reject factory api, i need to use 
Constructor api  " new Promise()"


function blockMe(message) {
    console.log(message)
}


function login(userName, password) {
    return new Promise((resolve, reject) => {
        if (userName === 'admin' && password === 'admin') {
            setTimeout(resolve, 5000, 'login is success')
        } else {
            setTimeout(reject, 5000, 'login is failed')
        }
    })

}



function main() {
    blockMe('start')
    login('admin', 'admin')
        .then(res => console.log(res))
        .catch(err => console.log(err))
    login('foo', 'bar')
        .then(res => console.log(res))
        .catch(err => console.log(err))
    blockMe('end')
}
main()
.....................

Use case :how to solve Callback hell:
.....................................
//callback chaining

const getUser = () => {
    console.log('getUser is called')
    return new Promise((resolve, reject) => {
        let user = { name: 'admin' }
        //user = null
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, { message: 'User Not found' })
        }
    })
}
const login = user => {
    console.log('login is called')
    return new Promise((resolve, reject) => {
        if (user.name === 'admin') {
            setTimeout(resolve, 1000, 'Login success')
        } else {
            setTimeout(reject, 1000, 'login failed')
        }
    })
}
const showDashboard = loginstatus => {
    console.log('showDashboard is called')
    return new Promise((resolve, reject) => {
        if (loginstatus === 'Login success') {
            setTimeout(resolve, 1000, 'Welcome to Dashboard Page')
        } else {
            setTimeout(reject, 1000, 'Welcome to Guest Page')
        }
    })
}



function main() {
    // getUser(user => {
    //     login(user, (status) => {
    //         showDashboard(status, page => {
    //             console.log(page)
    //         }, errpage => {
    //             console.log(errpage)
    //         })
    //     }, err => {
    //         console.log(err)
    //     })
    // }, err => {
    //     console.log(err)
    // })
    getUser()
        .then(user => {
            return login(user)
        })
        .then(status => {
            return showDashboard(status)
        }).then(page => {
            console.log(page)
        })
        .catch(err => console.log(err))
}
main()
...................................................................................
			Promise Chaining -Promise Hell
..................................................................................

getUser()
    .then(user => login(user))
    .then(status => console.log(status))
    .catch(err => console.log(err))

Here the code is having so many "then ables", in realtime if we have many more thens which makes code even harder.

ES 7 introduced new feature called "async and await"  which are keywords , when we resolve promises we dont need to use thens and catch.

We can write more declarative,sync style of async code.

const getUser = () => {
    console.log('getUser is called')
    return new Promise((resolve, reject) => {
        let user = { name: 'admin' }
        //user = null
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, { message: 'User Not found' })
        }
    })
}
const login = user => {
    console.log('login is called')
    return new Promise((resolve, reject) => {
        if (user.name === 'admin') {
            setTimeout(resolve, 1000, 'Login success')
        } else {
            setTimeout(reject, 1000, 'login failed')
        }
    })
}
const showDashboard = loginstatus => {
    console.log('showDashboard is called')
    return new Promise((resolve, reject) => {
        if (loginstatus === 'Login success') {
            setTimeout(resolve, 1000, 'Welcome to Dashboard Page')
        } else {
            setTimeout(reject, 1000, 'Welcome to Guest Page')
        }
    })
}



async function main() {

    //   getUser()
    //     .then(user => {
    //         return login(user)
    //     })
    //     .then(status => {
    //         return showDashboard(status)
    //     }).then(page => {
    //         console.log(page)
    //     })
    //     .catch(err => console.log(err))

    try {
        const user = await getUser()
        const status = await login(user)
        const page = await showDashboard(status)
        console.log(user, status, page)
    }
    catch (err) {
        console.log(err)
    }
}
main()
....................................................................................
			  Module Pattern-ES 6 Modules
.....................................................................................
Module patterns
1.namespace design pattern
2.AMD
3.Commonjs
4.ES 6 Module pattern
5.System
6.UMD

COMMON JS and ES 6 only in dev..

How to share code from one file and folder?
 
There are two keywords

export, export default

How to link or import code from file and folder?

there is one keyword

import

eg:
src/util.js

export const firstName = 'Subramanian'
export const lastName = 'Murugan'

src/index.js
import { firstName, lastName } from "./util";

function main() {
    console.log(firstName, lastName)
}
main()

After running, you will get error

Uncaught SyntaxError: Cannot use import statement outside a module

the browsers dont support "es6 module pattern" directly.

How to run?

There are many ways

1.You can use build tools - webpack,rollup,vite etc...
2.YOu can use browser configurations


Using browser directly:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 Apps</title>
</head>
<body>
    <h1>ES6 Apps</h1>
    <script  src="src/index.js" type="module"></script>
</body>
</html>

Second:
 while importing you must tell "fileName.js"

eg:
import { firstName, lastName } from "./util.js";

function main() {
    console.log(firstName, lastName)
}
main()
.........

export syntax:

// export const firstName = 'Subramanian'
// export const lastName = 'Murugan'
// export const address = {
//     city:'Coimbatore'
// }
// export const skills = ['react','android','ios']

const firstName = 'Subramanian'
const lastName = 'Murugan'
const address = {
    city: 'Coimbatore'
}
const skills = ['react', 'android', 'ios']

export { firstName, lastName, address, skills }


export default:
...............

src/App.js

// export default function AppOne() {
//     return 'App'
// }

export default function App() {
    return 'App'
}

src/index.js
import { firstName, lastName,skills,address } from "./util.js";
import App from "./App.js";

function main() {
    console.log(firstName, lastName,skills,address)
    console.log(App())
}
main()

export vs export default:

1.export can be used to export multiple things from single file
2.export default can be used to export only one thing from single file.


Can i coimbine export and export default in a single file?

 Yes!.

src/lib.js


export const version = '1.0'
export const name = 'Chat GPT '

export default class AIBot {
    constructor() {
        console.log('AIBOT')
    }
}
src/index.js
import { firstName, lastName, skills, address } from "./util.js";
import App from "./App.js";
import AIBot, { version, name } from "./lib.js";

function main() {
    console.log(firstName, lastName, skills, address)
    console.log(App())
    new AIBot()
    console.log(version, name)
}
main()







